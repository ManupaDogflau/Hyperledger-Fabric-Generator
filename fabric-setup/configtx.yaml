
Organizations:
 - &OrdererOrg
  Name: Orderer
  ID: OrdererMSP
  MSPDir: crypto-config/ordererOrganizations/Ordr_com/msp
  Policies:
            Readers:
                Type: Signature
                Rule: "OR('OrdererMSP.member')"
            Writers:
                Type: Signature
                Rule: "OR('OrdererMSP.member')"
            Admins:
                Type: Signature
                Rule:  "OR('OrdererMSP.admin')"
#Insert1
 - &Org  
  Name: Org  
  ID: OrgMSP  
  MSPDir: crypto-config/peerOrganizations/peer_com/msp 
  Policies:  
            Readers: 
              Type: Signature 
              Rule: "OR('OrgMSP.admin','OrgMSP.peer','OrgMSP.client')" 
            Writers:  
              Type: Signature 
              Rule: "OR('OrgMSP.admin','OrgMSP.client')" 
            Admins:   
              Type: Signature 
              Rule: "OR('OrgMSP.admin')" 
  AnchorPeers:   
   - Host: HOSTA_peer_com 
     Port: 7051 
 - &OrgA  
  Name: OrgA  
  ID: OrgAMSP  
  MSPDir: crypto-config/peerOrganizations/peerA_com/msp 
  Policies:  
            Readers: 
              Type: Signature 
              Rule: "OR('OrgAMSP.admin','OrgAMSP.peer','OrgAMSP.client')" 
            Writers:  
              Type: Signature 
              Rule: "OR('OrgAMSP.admin','OrgAMSP.client')" 
            Admins:   
              Type: Signature 
              Rule: "OR('OrgAMSP.admin')" 
  AnchorPeers:   
   - Host: HOSTA_peerA_com 
     Port: 7051 
 - &OrgB  
  Name: OrgB  
  ID: OrgBMSP  
  MSPDir: crypto-config/peerOrganizations/peerB_com/msp 
  Policies:  
            Readers: 
              Type: Signature 
              Rule: "OR('OrgBMSP.admin','OrgBMSP.peer','OrgBMSP.client')" 
            Writers:  
              Type: Signature 
              Rule: "OR('OrgBMSP.admin','OrgBMSP.client')" 
            Admins:   
              Type: Signature 
              Rule: "OR('OrgBMSP.admin')" 
  AnchorPeers:   
   - Host: HOSTA_peerB_com 
     Port: 7051 
 - &OrgC  
  Name: OrgC  
  ID: OrgCMSP  
  MSPDir: crypto-config/peerOrganizations/peerC_com/msp 
  Policies:  
            Readers: 
              Type: Signature 
              Rule: "OR('OrgCMSP.admin','OrgCMSP.peer','OrgCMSP.client')" 
            Writers:  
              Type: Signature 
              Rule: "OR('OrgCMSP.admin','OrgCMSP.client')" 
            Admins:   
              Type: Signature 
              Rule: "OR('OrgCMSP.admin')" 
  AnchorPeers:   
   - Host: HOSTA_peerC_com 
     Port: 7051 
 
Capabilities:
    Channel: &ChannelCapabilities
        V1_4_3: true
        # V1.3 for Channel enables the new non-backwards compatible
        # features and fixes of fabric v1.3
        V1_3: false
        # V1.1 for Channel enables the new non-backwards compatible
        # features and fixes of fabric v1.1
        V1_1: false
    Orderer: &OrdererCapabilities
        V1_4_2: true
        # V1.1 for Orderer enables the new non-backwards compatible
        # features and fixes of fabric v1.1
        V1_1: false
    Application: &ApplicationCapabilities
        V1_4_2: true
        # V1.3 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.3.
        V1_3: false
        # V1.2 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.2 (note, this need not be set if
        # later version capabilities are set)
        V1_2: false
        # V1.1 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.1 (note, this need not be set if
        # later version capabilities are set).
        V1_1: false
Application: &ApplicationDefaults

    Organizations:
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    Capabilities:
        <<: *ApplicationCapabilities

################################################################################
#
#   SECTION: Orderer
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters
#
################################################################################
Orderer: &OrdererDefaults

    # Orderer Type: The orderer implementation to start
    # Available types are "solo","kafka"  and "etcdraft"
    OrdererType: solo

    Addresses: 
        #Insert2
        - HostOrderer1_Ordr_com:7050 
        - HostOrderer2_Ordr_com:7050 
        - HostOrderer3_Ordr_com:7050 
       
    # Batch Timeout: The amount of time to wait before creating a batch
    BatchTimeout: 2s

    # Batch Size: Controls the number of messages batched into a block
    BatchSize:

        # Max Message Count: The maximum number of messages to permit in a batch
        MaxMessageCount: 10

        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch.
        AbsoluteMaxBytes: 99 MB

        # Preferred Max Bytes: The preferred maximum number of bytes allowed for
        # the serialized messages in a batch. A message larger than the preferred
        # max bytes will result in a batch larger than preferred max bytes.
        PreferredMaxBytes: 512 KB

    Kafka:
        # Brokers: A list of Kafka brokers to which the orderer connects
        # NOTE: Use IP:port notation
        Brokers:
            - 127.0.0.1:9092

    # EtcdRaft defines configuration which must be set when the "etcdraft"
    # orderertype is chosen.
    EtcdRaft:
        # The set of Raft replicas for this network. For the etcd/raft-based
        # implementation, we expect every replica to also be an OSN. Therefore,
        # a subset of the host:port items enumerated in this list should be
        # replicated under the Orderer.Addresses key above.
        Consenters:
            #Insert3
            - Host: HostOrderer1_Ordr_com 
              Port: 7050 
              ClientTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer1_Ordr_com/tls/server.crt   
              ServerTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer1_Ordr_com/tls/server.crt     
            - Host: HostOrderer2_Ordr_com 
              Port: 7050 
              ClientTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer2_Ordr_com/tls/server.crt   
              ServerTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer2_Ordr_com/tls/server.crt     
            - Host: HostOrderer3_Ordr_com 
              Port: 7050 
              ClientTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer3_Ordr_com/tls/server.crt   
              ServerTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer3_Ordr_com/tls/server.crt     
           
    # Organizations is the list of orgs which are defined as participants on
    # the orderer side of the network
    Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"
        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"

Channel: &ChannelDefaults
    Policies:
        # Who may invoke the 'Deliver' API
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        # Who may invoke the 'Broadcast' API
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        # By default, who may modify elements at this config level
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities describes the channel level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ChannelCapabilities



Profiles:

  OrdererGenesis:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            SampleConsortium:
                Organizations:
                    #Insert4
                    - *Org     
                    - *OrgA     
                    - *OrgB     
                    - *OrgC     
                   
  OrgChannel:
        Consortium: SampleConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
              #Insert5
              - *Org     
              - *OrgA     
              - *OrgB     
              - *OrgC     
             
            Capabilities:
                <<: *ApplicationCapabilities

  SampleDevModeKafka:
        <<: *ChannelDefaults
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
            Kafka:
                Brokers:
                - kafka.example.com:9092

            Organizations:
            - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities
        Application:
            <<: *ApplicationDefaults
            Organizations:
            - <<: *OrdererOrg
        Consortiums:
            SampleConsortium:
                Organizations:
                #Insert6
                - *Org     
                - *OrgA     
                - *OrgB     
                - *OrgC     
              
  

  SampleMultiNodeEtcdRaft:
        <<: *ChannelDefaults
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: etcdraft
            EtcdRaft:
                Consenters:
                #Insert7
                - Host: HostOrderer1_Ordr_com 
                  Port: 7050 
                  ClientTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer1_Ordr_com/tls/server.crt   
                  ServerTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer1_Ordr_com/tls/server.crt     
                - Host: HostOrderer2_Ordr_com 
                  Port: 7050 
                  ClientTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer2_Ordr_com/tls/server.crt   
                  ServerTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer2_Ordr_com/tls/server.crt     
                - Host: HostOrderer3_Ordr_com 
                  Port: 7050 
                  ClientTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer3_Ordr_com/tls/server.crt   
                  ServerTLSCert: crypto-config/ordererOrganizations/Ordr_com/orderers/HostOrderer3_Ordr_com/tls/server.crt     
            Addresses:
                #Insert8
                - HostOrderer1_Ordr_com:7050 
                - HostOrderer2_Ordr_com:7050 
                - HostOrderer3_Ordr_com:7050 

            Organizations:
            - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities
        Application:
            <<: *ApplicationDefaults
            Organizations:
            - <<: *OrdererOrg
        Consortiums:
            SampleConsortium:
                Organizations:
                #Insert6
                - *Org     
                - *OrgA     
                - *OrgB     
                - *OrgC     
              


